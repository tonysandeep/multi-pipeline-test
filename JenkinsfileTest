pipeline {
    agent { label 'master' }
	options { skipDefaultCheckout() }
    stages {
	 
                stage("Checkout SCM") {
					steps {
								cleanWs()
								echo 'checkout scm'
								checkout scm
						}
				}
		/*stage("Unit Test") {
					agent { label 'windows' }
					steps {
								cleanWs()
								checkout scm
								echo ' Unit Test Stage'
								bat 'mvn test'
								junit 'target\\surefire-reports\\*.xml'	
						}
				}*/
	    			/*stage('Scanning for Security') {
					 steps {
						fodStaticAssessment bsiToken: 'eyJ0ZW5hbnRJZCI6OTkyNCwidGVuYW50Q29kZSI6IkRYQ18xODAxX0ZNQV85MjY4ODYyMzciLCJyZWxlYXNlSWQiOjgyMTgyLCJwYXlsb2FkVHlwZSI6IkFOQUxZU0lTX1BBWUxPQUQiLCJhc3Nlc3NtZW50VHlwZUlkIjoxNCwidGVjaG5vbG9neVR5cGUiOiJKQVZBL0oyRUUiLCJ0ZWNobm9sb2d5VHlwZUlkIjo3LCJ0ZWNobm9sb2d5VmVyc2lvbiI6IjEuOCIsInRlY2hub2xvZ3lWZXJzaW9uSWQiOjEyLCJhdWRpdFByZWZlcmVuY2UiOiJBdXRvbWF0ZWQiLCJhdWRpdFByZWZlcmVuY2VJZCI6MiwiaW5jbHVkZVRoaXJkUGFydHkiOmZhbHNlLCJpbmNsdWRlT3BlblNvdXJjZUFuYWx5c2lzIjpmYWxzZSwicG9ydGFsVXJpIjoiaHR0cHM6Ly90cmlhbC5mb3J0aWZ5LmNvbS8iLCJhcGlVcmkiOiJodHRwczovL2FwaS50cmlhbC5mb3J0aWZ5LmNvbSIsInNjYW5QcmVmZXJlbmNlIjoiU3RhbmRhcmQiLCJzY2FuUHJlZmVyZW5jZUlkIjoxfQ==', entitlementPreference: 'SingleScanOnly', inProgressScanActionType: 'CancelInProgressScan', overrideGlobalConfig: true, personalAccessToken: 'fortifyondemand', remediationScanPreferenceType: 'RemediationScanIfAvailable', srcLocation: '.', tenantId: 'DXC_1801_FMA_926886237', username: 'tonisundhp@gmail.com'
						fodPollResults bsiToken: 'eyJ0ZW5hbnRJZCI6OTkyNCwidGVuYW50Q29kZSI6IkRYQ18xODAxX0ZNQV85MjY4ODYyMzciLCJyZWxlYXNlSWQiOjgyMTgyLCJwYXlsb2FkVHlwZSI6IkFOQUxZU0lTX1BBWUxPQUQiLCJhc3Nlc3NtZW50VHlwZUlkIjoxNCwidGVjaG5vbG9neVR5cGUiOiJKQVZBL0oyRUUiLCJ0ZWNobm9sb2d5VHlwZUlkIjo3LCJ0ZWNobm9sb2d5VmVyc2lvbiI6IjEuOCIsInRlY2hub2xvZ3lWZXJzaW9uSWQiOjEyLCJhdWRpdFByZWZlcmVuY2UiOiJBdXRvbWF0ZWQiLCJhdWRpdFByZWZlcmVuY2VJZCI6MiwiaW5jbHVkZVRoaXJkUGFydHkiOmZhbHNlLCJpbmNsdWRlT3BlblNvdXJjZUFuYWx5c2lzIjpmYWxzZSwicG9ydGFsVXJpIjoiaHR0cHM6Ly90cmlhbC5mb3J0aWZ5LmNvbS8iLCJhcGlVcmkiOiJodHRwczovL2FwaS50cmlhbC5mb3J0aWZ5LmNvbSIsInNjYW5QcmVmZXJlbmNlIjoiU3RhbmRhcmQiLCJzY2FuUHJlZmVyZW5jZUlkIjoxfQ==', overrideGlobalConfig: true, personalAccessToken: 'fortifyondemand', pollingInterval: 1, tenantId: 'DXC_1801_FMA_926886237', username: 'tonisundhp@gmail.com'
					}
				}*/
	    
				/*stage('Build and Package') {
						steps {
								echo 'Clean Build'
								sh "ls"
								sh "pwd"
								//sh "mvn sonar:sonar clean compile package -Dtest=\\!TestRunner* -DfailIfNoTests=false -Dsonar.projectKey=addressbook -Dsonar.host.url=http://10.62.125.9:8085/ -Dsonar.login=f16fabd2605044f38e79e4c0e4bc5f73c55dd144"
								sh 'mvn package -DskipTests'
								 
						}
				}*/

				 stage('Test Automation') {
				 	 when {
					   not {
					 		branch 'master'
					    }
					 }
					steps {
									echo "test phase"
						}
					}
		     

				/* stage('Release Approval') {
					 when {
					 branch 'master'
					 }
					steps {
						echo 'Confirm the deployment'
						echo "waiting for approval"
						timeout( time: 120, unit: "SECONDS" ){
						input 'Do you want to proceed to the Deployment?'
						//milestone 1
									}
						}
					} */

					stage('Staging Release version') {
						when {
							 branch 'master'
						 }						
					    steps {
							echo 'set version to Release'
						script{
								def releasedVersion = getReleaseVersion()
								print releasedVersion
								sh "mvn versions:set -DnewVersion=${releasedVersion}-RELEASE"
								echo "commit the release version"
								sh "mvn versions:commit"
						
							}
						}
					}		
			
			stage('Release Tag to SCM') {
				when {
							 branch 'master'
						 }
			    steps {
				echo 'clean test'
				script {
					def releasedVersion = getReleaseVersion()
					sh 'git status'
					sh 'git add -- pom.xml'
					sh "git commit -a -m 'Release${releasedVersion}'"
					sh "git tag -a ${releasedVersion} -m 'Addressbook-${releasedVersion}'"
					sh "git push https://tonysandeep:Qwerty0420@github.com/tonysandeep/multi-pipeline-test.git ${releasedVersion}"
				}

			    }
			}
			
			stage('Sanity Test') {
				when {
							 branch 'master'
						 }
			    steps {
			    script{
				echo 'clean test'
				def releasedVersion = getReleaseVersion()
					checkout([  
						$class: 'GitSCM', 
						branches: [[name: "refs/tags/${releasedVersion}"]], 
						doGenerateSubmoduleConfigurations: false, 
						extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'release']], 
						submoduleCfg: [], 
						userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/tonysandeep/multi-pipeline-test.git']]
					])
					dir('release'){
						sh 'mvn clean test install'
					}	
				}
			    }
			}
        
			stage("Create RELEASE Package") {
					when {
							 branch 'master'
						 }
					steps {
					script {
						dir('release') { 	
							def releasedVersion = getReleaseVersion()
						
							sh "sed -i 's/{{PACKAGE_VERSION}}/${releasedVersion}.0/g' deployit-manifest.xml"
							sh "sed -i 's/{{Deploy-App}}/AddressBook-RELEASE/g' deployit-manifest.xml"
							xldCreatePackage artifactsPath: 'release/target', manifestPath: 'release/deployit-manifest.xml', darPath: "release/${releasedVersion}.0.dar" 
							}
						}
					}
			}
			stage('XLDeploy  Publish Release package') { 
				when {
							 branch 'master'
						 }
				steps {
					script {
					dir('release') {
						def releasedVersion = getReleaseVersion()
						xldPublishPackage serverCredentials: 'XLDeployServer', darPath: "${releasedVersion}.0.dar"
					}
					}
				}	
			}
			stage('UAT XL Release Deployment') { 
				when {
							 branch 'master'
						 }
				steps {
					script {
					dir('release') {
						
						def releasedVersion = getReleaseVersion()
						xldDeploy serverCredentials: 'XLDeployServer', environmentId: 'Environments/QATomcatENv', packageId: "Applications/AddressBook-RELEASE/${releasedVersion}.0"
						}
					}
				}
			}
            
			
    }     
        
    tools {
        maven 'maven3.3.9'
        jdk 'openjdk8'
    }

     environment {
        // This can be nexus3 or nexus2
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // Where your Nexus is running
        NEXUS_URL = "10.62.125.9:8084"
        //NEXUS_URL = "35.200.184.59:8081"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = "maven-snapshots"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexusadmin"
    }   

    post {
         always {
            echo 'JENKINS PIPELINE'
            

        }
        success {
            echo 'JENKINS PIPELINE SUCCESSFUL'
        }
        failure {
            echo 'JENKINS PIPELINE FAILED'
        }
        unstable {
            echo 'JENKINS PIPELINE WAS MARKED AS UNSTABLE'
        }
        changed {
            echo 'JENKINS PIPELINE STATUS HAS CHANGED SINCE LAST EXECUTION'
        }
    }

     
}
def getReleaseVersion() {
                        def pom = readMavenPom file: 'pom.xml'
                        print pom.version
                        def versionNumber;
                        versionNumber = env.BUILD_NUMBER;
                        print versionNumber
                        return pom.version.replace("-SNAPSHOT", ".${versionNumber}")
                    }
